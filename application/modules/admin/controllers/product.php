<?phpclass product extends MY_Controller{    public function __construct(){        parent::__construct();        $this->_data['now'] = 'Product';        $this->load->model('mproduct');        $this->load->model('mattribute');        $this->load->model('mconfig');        $this->load->model('mcustomer');        $user = $this->session->userdata('user');        if(!$user || $user['user_type'] != 'administrator'){            if($user && $user['user_type']!='nhanvien' && !strpos($_SERVER['REQUEST_URI'],'admin/product/phieubanhang') && !strpos($_SERVER['REQUEST_URI'],'admin/index/ajax')){                redirect(base_url()."admin/product/phieubanhang");                }            else if($user['user_type']=='administrator'){                redirect(base_url().'admin');            }               else if(!$user){                redirect(base_url().'admin/login');            }                        }        $this->form_validation->CI =& $this;        $this->load->model('mcategory');        $this->_data['listcate'] = $this->mcategory->getMenu();        $this->load->model('msupplier');        $this->_data['supplier'] = $this->msupplier->getAll();        //--------        //url upload        $this->_gallery_url = base_url()."public/product/";        //đường dẫn vật lý        $this->_gallery_path = realpath(APPPATH. "../public/product");    }    public function listall(){        if(!isset($_GET['per_page'])){            $start = 0 ;        }else{            $start=$_GET['per_page'];        }        if(!isset($_GET['s'])){            $s = '' ;        }else{            $s=$_GET['s'];        }        $this->_data['s'] = $s;        if(!isset($_GET['cate'])){            $cate = 'null' ;        }else{            $cate=$_GET['cate'];        }        if(!isset($_GET['hotdeal'])){            $hotdeal = 'null' ;        }else{            $hotdeal = $_GET['hotdeal'];        }        $this->_data['cate'] = $cate;        $this->_data['hotdeal'] = $hotdeal;        $this->load->library('pagination');        $config['base_url'] = base_url().'admin/product/listall?cate='.$cate.'&hotdeal='.$hotdeal.'&s='.$s;        //config phân trang        $config['total_rows'] = $this->mproduct->numRows($s,$cate,$hotdeal);        $config['per_page'] =15;        $config['uri_segment'] = 4;        $config['cur_tag_open'] = "<li><a><font color='black'>";        $config['cur_tag_close'] = '</font></a></li>';        $config['num_tag_open'] = '<li>';        $config['num_tag_close'] = '</li>';        $config['prev_link'] = 'Prev';        $config['prev_tag_open'] = '<li>';        $config['prev_tag_close'] = '</li>';        $config['next_link'] = 'Next';        $config['next_tag_open'] = '<li>';        $config['next_tag_close'] = '</li>';        $config['first_tag_open'] = '<li>';        $config['first_tag_close'] = '</li>';        $config['last_tag_open'] = '<li>';        $config['last_tag_close'] = '</li>';        $this->pagination->initialize($config);        $this->_data['pagination']=$this->pagination->create_links();        $this->_data['template'] = 'admin/product/list_view';        $this->_data['title'] = 'Trang ';        $this->_data['info'] = $this->mproduct->listAll2($config['per_page'],$start,$s,$cate,$hotdeal);        $this->load->view("layout/admin",$this->_data);    }    public function duplicate($id){        $product = $this->mproduct->getById($id);        $name = $product['name'].' - '.uniqid();        $link = $this->generateLink2($name);        $arr = array(            'category_id' => $product['category_id'],            'multi_cate' => $product['multi_cate'],            'name' => $name,            'keyword' => $product['keyword'],            'masp' => uniqid(),            'link' => $link,            'info' => $product['info'],            'conhang' => $product['conhang'],            'all' => $product['all'],            'giavon' => $product['giavon'],            'loinhuan' => $product['loinhuan'],            'supplier_id' => $product['supplier_id'],            'description' => $product['description'],            'barcode' => $product['barcode'],            'price' => $product['price'],            'price_reduce' => $product['price_reduce'],            'real'=>$product['real'],            'created' => time(),            'updated' => time(),            'is_copy'=>'true'        );        $id2 = $this->mproduct->add($arr);        //$path = $this->_gallery_path.'/'.$id2.'/attribute/dang-cap-nhat';        mkdir($path,0777,TRUE);        mkdir($path.'/thumbnail',0777,TRUE);        //copy(realpath(APPPATH. "../public/default/product/update.jpg"),$path.'/update.jpg');        //$this->_create_thumb('update.jpg',$path);        //$img = array();        //array_push($img,'update.jpg');        //$attr = array(        //    'product_id'=>$id2,        //    'name' => 'Đang cập nhật',        //    'image'=> json_encode($img),        //    'name_link' => $this->generateLink2('Đang cập nhật')        //);        //$insert_id = $this->mattribute->add($attr);        //$attr = array(        //    'product_id'=>$id2 ,        //    'price'=>0,        //    'sub'=>'Đang cập nhật'        //);        //$insert_id = $this->mattribute->add($attr);         redirect(base_url()."admin/product/edit/".$id2);    }    public function add(){        $this->_data['action'] = strtolower(__FUNCTION__);        if(isset($_POST['ok'])){            $this->form_validation->set_rules("name","Tên Sản Phẩm","required");            $this->form_validation->set_rules("link","Link","callback_check_link");            $this->form_validation->set_rules("masp","Mã Sản Phẩm","callback_check_masp");            $this->form_validation->set_rules("price","Giá","required");            $this->form_validation->set_rules("category_id","Danh Mục","required");            if($this->form_validation->run()==TRUE){                $arr = array(                    'category_id' => $this->input->post('category_id')[0],                    'multi_cate' => json_encode($this->input->post('category_id')),                    'name' => $this->input->post('name'),                    'keyword' => $this->input->post('keyword'),                    'masp' => $this->input->post('masp'),                    'link' => $this->input->post('link'),                    'conhang' => $this->input->post('conhang'),                    'info' => $this->input->post('info'),                    'all' => $this->input->post('all'),                    'is_copy' => '',                    'description' => $this->input->post('description'),                    'barcode' => '',                    'giavon' => $this->input->post('giavon'),                    'loinhuan' => $this->input->post('price') - $this->input->post('giavon'),                    'supplier_id' => $this->input->post('supplier_id'),                    'price' => $this->input->post('price'),                    'selling' => $this->input->post('selling'),                    'hotdeal' => $this->input->post('hotdeal'),                    'price_reduce' => $this->input->post('price_reduce'),                    'real'=>($this->input->post('price')*(100-$this->input->post('price_reduce'))/100),                    'created' => time(),                    'updated' => time(),                );                $id = $this->mproduct->add($arr);                $dem = 0 ;                $this->load->library("upload");                foreach($_POST['attribute'] as $key=>$value){                    $this->load->helper('text');                    $generate = strtolower(url_title(removesign($value,'dash',true)));                    $path = $this->_gallery_path.'/'.$id.'/attribute/'.$generate;                    if(!is_dir($path)) //create the folder if it's not already exists                    {                        mkdir($path,0777,TRUE);                        mkdir($path.'/thumbnail',0777,TRUE);                    }                    if($value!= ''){                        $dem++;                        $config = array('upload_path'   => $path,                            'allowed_types' => 'gif|jpg|png|jpeg',                            'max_size'      => '2000');                        $this->upload->initialize($config);                        $data_images = '';                        if(!$this->upload->do_multi_upload("thuoctinh".$dem)){                            $this->session->set_flashdata('ses_flash',"Thêm");                            redirect(base_url()."admin/product/listall");                            return;                        }else{                            $data =$this->upload->get_multi_upload_data() ;                            $images  = array();                            foreach($data as $val){                                $images[] = $val['file_name'];                                $this->_create_thumb($val['file_name'],$path);                            }                            $data_images = json_encode($images);                        }                        $attr = array(                            'product_id'=>$id ,                            'name' => $value,                            'image'=>$data_images,                            'name_link' => strtolower(url_title(removesign($value,'dash',true)))                        );                       $insert_id = $this->mattribute->add($attr);                    }                }                $newpath = $this->_gallery_path.'/'.$id;                rename($path, $newpath);                $this->session->set_flashdata('ses_flash',"Thêm");                redirect(base_url()."admin/product/listall");            }            $arr = array(                'category_id' => $this->input->post('category_id'),                'name' => $this->input->post('name'),                'masp' => $this->input->post('masp'),                'keyword' => $this->input->post('keyword'),                'link' => $this->input->post('link'),                'conhang' => $this->input->post('conhang'),                'info' => $this->input->post('info'),                'supplier_id' => $this->input->post('supplier_id'),                'price' => $this->input->post('price'),                'selling' => $this->input->post('selling'),                'description' => $this->input->post('description'),                'barcode' => '',                'all' => $this->input->post('all'),                'giavon' => $this->input->post('giavon'),                'loinhuan' => $this->input->post('price') - $this->input->post('giavon'),                'hotdeal' => $this->input->post('hotdeal'),                'price_reduce' => $this->input->post('price_reduce'),                'real'=>($this->input->post('price')*(100-$this->input->post('price_reduce'))/100),                'created' => time(),                'updated' => time(),            );            $this->_data['info'] = $arr;        }        $this->_data['template'] = 'admin/product/modify_view';        $this->_data['title'] = 'Trang Thêm  ';        $this->load->view("layout/admin",$this->_data);    }    public function add_quantity($id){        $this->_data['action'] = strtolower(__FUNCTION__);        $this->_data['info'] = $this->mproduct->getById($id);        $info =  $this->_data['info'];        if(isset($_POST['ok'])){            $this->form_validation->set_rules("add_quantity","Số Lượng Hàng Thêm","required");            $this->form_validation->set_rules("add_quantity","Số Lượng Hàng Thêm","numeric");            if($this->form_validation->run()==TRUE){                $arr = array(                    'all' => $this->input->post('add_quantity') +  $info['all'],                );                $this->mproduct->editById($id,$arr);                $this->load->model('mlog');                $arr = array(                    'product_name' => $info['name'],                    'quantity' => $this->input->post('add_quantity'),                    'reason'=>$this->input->post('reason'),                    'created' => time()                );                $this->mlog->add($arr);                $this->session->set_flashdata('ses_flash',"Thêm Số Lượng");                redirect(base_url()."admin/product/listall");            }            else{                $this->_data['reason'] = $this->input->post('reason');            }        }        $this->_data['template'] = 'admin/product/add_quantity';        $this->load->view("layout/admin",$this->_data);    }    public function log(){        $this->load->model('mlog');        $this->_data['info'] = $this->mlog->listAll();        $this->_data['template'] = 'admin/product/log';        $this->_data['title'] = 'Trang Sửa User ';        $this->load->view("layout/admin",$this->_data);    }    public function check_link($link){        if($this->mproduct->checkLink($link)==false){            $this->form_validation->set_message("check_link","Tên sản phẩm đã được sử dụng .");            return false;        }else{            return true;        }    }    public function check_masp($link){        if($this->mproduct->checkMasp($link)==false){            $this->form_validation->set_message("check_masp","Mã sản phẩm đã được sử dụng .");            return false;        }else{            return true;        }    }    public function del($id){        $this->mproduct->del($id);        $this->mattribute->delbyProduct($id);        $path = $this->_gallery_path.'/'.$id;        $this->deleteDir($path);        $this->session->set_flashdata('ses_flash',"Xóa");        redirect(base_url()."admin/product/listall");    }    public function dellist(){        foreach($_POST['del'] as $id){            $this->mproduct->del($id);            $this->mattribute->delbyProduct($id);            $path = $this->_gallery_path.'/'.$id;            $this->deleteDir($path);        }        $this->session->set_flashdata('ses_flash',"Xóa");        redirect(base_url()."admin/product/listall");    }    public function edit($id){        $this->_data['action'] = strtolower(__FUNCTION__);        $info = $this->mproduct->getById($id);        $this->_data['info'] = $info;        $info = $this->_data['info'];        $this->_data['attribute1'] = $this->mattribute->get1($id);        $this->_data['attribute2'] = $this->mattribute->get2($id);        if(isset($_POST['ok'])){            $this->form_validation->set_rules("name","Tên Sản Phẩm","required");            $this->form_validation->set_rules("price","Giá","required");            $this->form_validation->set_rules("category_id","Danh Mục","required");            if($info['link']!= $this->input->post('link')){                $this->form_validation->set_rules("link","Link","callback_check_link");            }            if($info['masp']!= $this->input->post('masp')){                $this->form_validation->set_rules("masp","Mã sản phẩm","callback_check_masp");            }            if($this->form_validation->run()==TRUE){                $arr = array(                    'category_id' => $this->input->post('category_id')[0],                    'multi_cate' => json_encode($this->input->post('category_id')),                    'name' => $this->input->post('name'),                    'keyword' => $this->input->post('keyword'),                    'masp' => $this->input->post('masp'),                    'link' => $this->input->post('link'),                    'conhang' => $this->input->post('conhang'),                    'info' => $this->input->post('info'),                    'is_copy' => '',                    'description' => $this->input->post('description'),                    'barcode' => '',                    'selling' => $this->input->post('selling'),                    'all' => $this->input->post('all'),                    'giavon' => $this->input->post('giavon'),                    'loinhuan' => $this->input->post('price') - $this->input->post('giavon'),                    'hotdeal' => $this->input->post('hotdeal'),                    'supplier_id' => $this->input->post('supplier_id'),                    'price' => $this->input->post('price'),                    'price_reduce' => $this->input->post('price_reduce'),                    'real'=>($this->input->post('price')*(100-$this->input->post('price_reduce'))/100),                    'created' => time(),                    'updated' => time(),                );                $this->mproduct->editById($id,$arr);                $att_old = $this->mattribute->get1($id);                for($i=1;$i<=count($att_old);$i++){                    $this->load->helper('text');                    $generate = $this->generateLink2($_POST['attribute_old'.$i]);                    $generate2 = $this->generateLink2($att_old[$i-1]['name']);                    $oldname = $this->_gallery_path.'/'.$att_old[$i-1]['product_id'].'/attribute/'.$generate2;                    $newname = $this->_gallery_path.'/'.$att_old[$i-1]['product_id'].'/attribute/'.$generate;                    rename ($oldname ,$newname);                    $attr = array(                        'name' => $_POST['attribute_old'.($i)],                        'name_link'=>$generate                    );                    $this->mattribute->editById($_POST['id_old'.($i)],$attr);                }                $dem = 0;                $this->load->library("upload");                foreach($_POST['attribute'] as $key=>$value){                                        if($value!= '' && $_FILES['thuoctinh1']['name'][0]!=''){                        $this->load->helper('text');                        $path = $this->_gallery_path.'/'.$id.'/attribute/'.strtolower(url_title(removesign($value,'dash',true)));                        if(!is_dir($path)) //create the folder if it's not already exists                        {                            mkdir($path,0777,TRUE);                            mkdir($path.'/thumbnail',0777,TRUE);                        }                        $dem++;                        $config = array('upload_path'   => $path,                            'allowed_types' => 'gif|jpg|png|jpeg',                            'max_size'      => '2000');                        $this->upload->initialize($config);                        $data_images = '';                        if(!$this->upload->do_multi_upload("thuoctinh".$dem)){                            $this->session->set_flashdata('ses_flash',"Sửa");                            redirect(base_url()."admin/product/listall");                            return;                        }else{                            $data =$this->upload->get_multi_upload_data() ;                            $images  = array();                            foreach($data as $val){                                $images[] = $val['file_name'];                                $this->_create_thumb($val['file_name'],$path);                            }                            $data_images = json_encode($images);                        }                        $name_link = strtolower(url_title(removesign($value,'dash',true)));                        $check = $this->mattribute->check($id,$name_link);                        if($check == -1){                            $attr = array(                                'product_id'=>$id ,                                'name' => $value,                                'name_link' => strtolower(url_title(removesign($value,'dash',true))),                                'image'=>$data_images                            );                           $insert_id = $this->mattribute->add($attr);                           }                        else{                            $att = $this->mattribute->getById($check);                            $image = array();                            $image = json_decode($att['image'],true);                            $img = json_decode($data_images,true);                            foreach($img as $im){                                array_push($image,$im);                               }                             $attr = array(                                'image'=>json_encode($image)                            );                            $this->mattribute->editById($att['id'],$attr);                        }                    }                }                $this->session->set_flashdata('ses_flash',"Sửa");                redirect(base_url()."admin/product/listall");            }        }        $this->_data['template'] = 'admin/product/modify_view';        $this->_data['title'] = 'Trang Sửa User ';        $this->load->view("layout/admin",$this->_data);    }            public function generateLink(){        $this->load->helper('text');        $name = $_POST['name'];        $generate = strtolower(url_title(removesign($name,'dash',true)));        echo $generate;    }    public function generateLink2($name){        $this->load->helper('text');        $generate = strtolower(url_title(removesign($name,'dash',true)));        return $generate;    }    public function image($id){        $this->_data['id'] = $id;        $this->_data['url'] =   base_url().'admin/product/upload/'.$id ;        $this->_data['template'] = 'admin/product/image';        $this->_data['title'] = 'Trang Quản Lý Hình Ảnh ';        $this->load->view("layout/upload",$this->_data);    }    public function upload($id){        $this->load->view("layout/UploadHandler",$this->_data);        $options = array(            'script_url' =>base_url().'admin/product/upload/'.$id,            'upload_dir' =>  $this->_gallery_path.'/'.$id.'/',            'upload_url' => base_url().'public/product/'.$id.'/',            'image_versions' => array(                'thumbnail' => array(                    'max_width' => 232,                    'max_height' => 270                )            )        );        $upload_handler = new UploadHandler($options,$id);        if(!isset($_GET['file'])){            $tam =  $upload_handler->getJson();            foreach($tam['files'] as $val){                $images[] = $val->name;            }        }else{            $info = $this->mproduct->getById($id);            $images = json_decode($info['image'],true);            $pos = array_search( $_GET['file'],$images);            unset($images[$pos]);        }        $data_images = json_encode($images);        $arr = array(            'image' => $data_images,            'avatar'=>0        );        $this->mproduct->editById($id,$arr);    }    private function _create_thumb($source,$path){        $this->load->library('image_lib');        $config = array(            "image_library"=>"gd2",            "source_image"=>$path.'/'.$source,            "new_image"=>$path.'/thumbnail/'.$source,            "maintain_ratio"=>TRUE,            "width"=>"232",            "height"=>"270"        );        $this->image_lib->initialize($config);        $this->image_lib->resize();        $this->image_lib->clear();    }    public static function deleteDir($dirPath) {        if (! is_dir($dirPath)) {            //  throw new InvalidArgumentException("$dirPath must be a directory");        }        if (substr($dirPath, strlen($dirPath) - 1, 1) != '/') {            $dirPath .= '/';        }        $files = glob($dirPath . '*', GLOB_MARK);        foreach ($files as $file) {            if (is_dir($file)) {                self::deleteDir($file);            } else {                unlink($file);            }        }        rmdir($dirPath);    }    public function avatar(){        $id = $_POST['id'];        $avatar = $_POST['avatar'];        $arr = array(            'avatar' => $avatar,        )   ;        $this->mproduct->editById($id,$arr);    }    public function avatar_att(){        $id = $_POST['id'];        $this->mattribute->resetAvatar($id);        $avatar = $_POST['avatar'];        $mausac = $_POST['name_link'];        $arr = array(            'avatar' => $avatar,        )   ;        $this->mattribute->editByIdColor($id,$mausac,$arr);    }        public function attribute($id,$color){        $this->_data['id'] = $id;        $this->_data['url'] =   base_url().'admin/product/attribute_img/'.$id.'/'.$color ;        $this->_data['template'] = 'admin/product/image';        $this->_data['title'] = 'Trang Quản Lý Hình Ảnh ';        $this->load->view("layout/upload",$this->_data);    }        public function del_attribute($id,$color){        $path = $this->_gallery_path.'/attribute/'.$id.'/'.$color;        $this->deleteDir($path);        $this->mattribute->del($id,$color);        redirect(base_url()."admin/product/edit/".$id);    }        public function del_attribute_sub($id,$product_id){        $this->mattribute->del2($id);        redirect(base_url()."admin/product/edit/".$product_id);    }    public function attribute_img($id,$color){        $this->load->view("layout/UploadHandler",$this->_data);        $options = array(            'script_url' =>base_url().'admin/product/attribute_img/'.$id.'/'.$color,            'upload_dir' =>  $this->_gallery_path.'/'.$id.'/attribute/'.$color.'/',            'upload_url' => base_url().'public/product/'.$id.'/attribute/'.$color.'/',            'image_versions' => array(                'thumbnail' => array(                    'max_width' => 232,                    'max_height' => 270                )            )        );        $upload_handler = new UploadHandler($options,$id);        $ck = true;        if(!isset($_GET['file'])){            $tam =  $upload_handler->getJson();            foreach($tam['files'] as $val){                $images[] = $val->name;            }        }else{            $id_att = $this->mattribute->check($id,$color);            $info = $this->mattribute->getById($id_att);            $images = json_decode($info['image'],true);            $pos = array_search( $_GET['file'],$images);            unset($images[$pos]);            $att = $this->mattribute->getById($id_att);            if(count($att)!=0){                if(!isset($images[$info['avatar']]))                    $ck = false;               }        }        $data_images = json_encode($images);        if($ck){            $arr = array(                'image' => $data_images,            );           }        else{            $arr = array(                'image' => $data_images,                'avatar'=>0            );        }        $this->mattribute->editByIdColor($id,$color,$arr);    }    //--------------------    public function phieubanhang(){            $this->load->model('mproduct');            $this->_data['product'] = $this->mproduct->getAll();            $this->load->view("admin/product/phieubanhang",$this->_data);    }    public function ajax_product(){        $id  = $_POST['id'];        $this->load->model('mproduct');        $this->load->model('mattribute');        $attribute = $this->mattribute->get1($id);        $product = $this->mproduct->getById($id);        echo json_encode(array('product'=>$product,'attr'=>$attribute));    }    public function save(){        $detail = json_decode($_POST['detail']);        $this->load->model('mproduct');        foreach($detail as $val){            $tam = $this->mproduct->getById($val[5]);            $this->mproduct->editById($val[5],array('sell'=>$tam['sell']+$val[3] ));        }                $this->load->model('mphieubanhang');        $customer = $this->mcustomer->getById($_POST['customer_id']);        $arr['name'] = $customer['name'];        $arr['address'] = $customer['address'];        $arr['email'] = $customer['email'];        $arr['phone'] = $customer['phone'];        $arr = $_POST;        $arr['date'] = $_POST['nam'].'-'.$_POST['thang'].'-'.$_POST['ngay'];        $this->mphieubanhang->add($arr);    }    //-----------------------------------    public function convert()	{        $tong  = $_POST['tong'];        echo ucfirst($this->convert_text($tong) . ' đồng .');    }    function convert_text($number) {        $hyphen      = ' ';        $conjunction = ' ';        $separator   = ' ';        $negative    = 'negative ';        $decimal     = ' phẩy ';        $dictionary  = array(            0                   => 'không',            1                   => 'một',            2                   => 'hai',            3                   => 'ba',            4                   => 'bốn',            5                   => 'năm',            6                   => 'sáu',            7                   => 'bảy',            8                   => 'tám',            9                   => 'chín',            10                  => 'mười',            11                  => 'mười một',            12                  => 'mười hai',            13                  => 'mười ba',            14                  => 'mười bốn',            15                  => 'mười năm',            16                  => 'mười sáu',            17                  => 'mười bảy',            18                  => 'mười tám',            19                  => 'mười chín',            20                  => 'hai mươi',            30                  => 'ba mươi',            40                  => 'bốn mươi',            50                  => 'năm mươi',            60                  => 'sáu mươi',            70                  => 'bảy mươi',            80                  => 'tám mươi',            90                  => 'chín mươi',            100                 => 'trăm',            1000                => 'ngàn',            1000000             => 'triệu',            1000000000          => 'tỷ',            1000000000000       => 'nghìn tỷ',            1000000000000000    => 'ngàn triệu triệu',            1000000000000000000 => 'tỷ tỷ'        );        if (!is_numeric($number)) {            return false;        }        if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {// overflow            trigger_error(                'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,                E_USER_WARNING            );            return false;        }        if ($number < 0) {            return $negative . $this->convert_text(abs($number));        }        $string = $fraction = null;        if (strpos($number, '.') !== false) {            list($number, $fraction) = explode('.', $number);        }        switch (true) {            case $number < 21:                $string = $dictionary[$number];                break;            case $number < 100:                $tens   = ((int) ($number / 10)) * 10;                $units  = $number % 10;                $string = $dictionary[$tens];                if ($units) {                    $string .= $hyphen . $dictionary[$units];                }                break;            case $number < 1000:                $hundreds  = $number / 100;                $remainder = $number % 100;                $string = $dictionary[$hundreds] . ' ' . $dictionary[100];                if ($remainder) {                    $string .= $conjunction . $this->convert_text($remainder);                }                break;            default:                $baseUnit = pow(1000, floor(log($number, 1000)));                $numBaseUnits = (int) ($number / $baseUnit);                $remainder = $number % $baseUnit;                $string = $this->convert_text($numBaseUnits) . ' ' . $dictionary[$baseUnit];                if ($remainder) {                    $string .= $remainder < 100 ? $conjunction : $separator;                    $string .= $this->convert_text($remainder);                }                break;        }        if (null !== $fraction && is_numeric($fraction)) {            /*            $string .= $decimal;            $words = array();            foreach (str_split((string) $fraction) as $number) {                $words[] = $dictionary[$number];            }            $string .= implode(' ', $words);            */        }        return $string;    }}